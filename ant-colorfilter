#!/usr/bin/awk -f
# [n];km	color n, style k
# style	0	reset
# 	1	bold
# 	2	normal
# 	3	normal
#	4	underlined
#	5	blink
# 	6	normal
#	7	inverted
# color 30	black	bright: grey
#	31	red
#	32	green
#	33	orange	bright: yellow
#	34	blue
#	35	magenta
#	36	cyan
#	37	white
#	39	default
# backg	40+x	Background color, as above
function colorize_inner(text)
{
	return colorize_good(colorize_warnings(colorize_errors(colorize_files(text))));
}
function colorize_files(text,     parts)
{
	old_ic = IGNORECASE
	IGNORECASE = 1
	if (0 != match(text, /^(.*[[:space:]:])?([^[:space:]:]+):([0-9,+-]+):(.*)$/, parts) && 0 == match(parts[2], /^[0-9]+$/)) { # file:123: Stuff. With file not only composed of digits (prevent time like 13:37:42,314 from matching)
		IGNORECASE = old_ic
		return colorize_inner(parts[1]) "\x1B[35m" parts[2] "\x1B[36m" ":" "\x1B[32m" parts[3] "\x1B[36m" ":" "\x1B[0m" colorize_inner(parts[4]);
	} else {
		IGNORECASE = old_ic
		return text;
	}
}
function colorize_errors(text,     parts)
{
	old_ic = IGNORECASE
	IGNORECASE = 1
	if (0 != match(text, /(.*)((error|problem|fail|failed|failure)s?)(.*)/, parts)) {
		IGNORECASE = old_ic
		return colorize_inner(parts[1]) "\x1B[31;1m" parts[2] "\x1B[0m" colorize_inner(parts[4]);
	} else {
		IGNORECASE = old_ic
		return text;
	}
}
function colorize_warnings(text,     parts)
{
	old_ic = IGNORECASE
	IGNORECASE = 1
	if (0 != match(text, /(.*)(warnings?|not found|unresolved|missing)(.*)/, parts)) {
		IGNORECASE = old_ic
		return colorize_inner(parts[1]) "\x1B[33m" parts[2] "\x1B[0m" colorize_inner(parts[3]);
	} else {
		IGNORECASE = old_ic
		return text;
	}
}
function colorize_good(text,     parts)
{
	old_ic = IGNORECASE
	IGNORECASE = 1
	if (0 != match(text, /(.*)\y(okay|ok|good|successful|success)\y(.*)/, parts)) {
		IGNORECASE = old_ic
		return colorize_inner(parts[1]) "\x1B[32m" parts[2] "\x1B[0m" colorize_inner(parts[3]);
	} else {
		IGNORECASE = old_ic
		return text;
	}
}
function coloring_log4j(text,     parts)
{
	old_ic = IGNORECASE
	IGNORECASE = 1
	#                      TIME                                                    ,.secons        [thread]         INFO         Class    -       Blah
	#                      111111111111111111111111111111111111111111111111111111112222222221133333444444444444555556666666677777888888889999999990000
	if (0 != match(text, /^([0-9]{4}-[0-9]{2}-[0-9]{2}\s+[0-9]{2}:[0-9]{2}:[0-9]{2}(,[0-9]*)?)(\s+)(\[[^\]]+\])(\s+)([^[:space:]]+)(\s+)([^[:space:]]*)(\s*-\s*)(.*)$/, parts)) {
		IGNORECASE = old_ic
		tagcolor = "\x1B[35;1m"
		if (parts[6] == "TRACE") {
			tagcolor = "\x1B[30;1m";
		} else if (parts[6] == "DEBUG") {
			tagcolor = "\x1B[34;1m";
		} else if (parts[6] == "INFO") {
			tagcolor = "\x1B[32;1m";
		} else if (parts[6] == "WARN") {
			tagcolor = "\x1B[33;1m";
		} else if (parts[6] == "ERROR") {
			tagcolor = "\x1B[31;1m"
		} else if (parts[6] == "FATAL") {
			tagcolor = "\x1B[41;37;1m"
		}
		return "\x1B[30;1m" parts[1] "\x1B[0m" parts[3] "\x1B[36m" parts[4] "\x1B[0m" parts[5] tagcolor parts[6] "\x1B[0m" parts[7] "\x1B[34;1m" parts[8] "\x1B[0m" parts[9] colorize_inner(parts[10]);
	} else {
		IGNORECASE = old_ic
		return colorize_inner(text);
	}
}
{
	if (0 != match($0, /^[a-zA-Z_-]+:$/, parts)) { # ^target:$
		printf "\x1B[37;1m%s", $0;
	} else if (0 != match($0, /^(\s*)(\[java\])(\s*)(.*)$/, parts)) { # ^     [java] Log4j stuff
		printf "%s\x1B[36m%s\x1B[0m%s%s", parts[1], parts[2], parts[3], coloring_log4j(parts[4])
	} else if (0 != match($0, /^(\s*)(\[[^\]]+\])(\s.*)$/, parts)) { # ^   [command]  Stuff$
		printf "%s\x1B[36m%s\x1B[0m%s", parts[1], parts[2], colorize_inner(parts[3]);
	} else if (0 != match($0, /BUILD SUCCESSFUL/, parts)) { # BUILD SUCCESSFUL
		printf "\x1B[32;1m%s", parts[0];
	} else if (0 != match($0, /BUILD FAILED/, parts)) { # BUILD FAILED
		printf "\x1B[31;1m%s", parts[0];
	} else {
		printf "%s", colorize_inner($0);
	}
	print "\x1B[0m";
}
